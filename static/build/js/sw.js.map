{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","www/static/js/sw/index.js","node_modules/browserify/node_modules/process/browser.js","node_modules/qheap/index.js","node_modules/qheap/lib/qheap.js","node_modules/rsvp/dist/rsvp.js","www/static/js/lib/promise.js","www/static/js/lib/serviceworker-cache-polyfill.js"],"names":[],"mappings":"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","file":"sw.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","const caches = require('../lib/serviceworker-cache-polyfill');\nconst Promise = require('../lib/promise');\nconst Heap = require('qheap');\n\nself.addEventListener('install', function(event) {\n   event.waitUntil(\n    caches.open('twoffline-static-v7').then(function(cache) {\n      return cache.addAll([\n        '/tweetdeck-prototype/',\n        '/tweetdeck-prototype/static/build/css/all.css',\n        '/tweetdeck-prototype/static/build/js/all.js'\n      ]);\n    })\n  )\n});\n\nclass RetryObject {\n  constructor(request) {\n    this.request = request;\n    this.retries = 0;\n  }\n\n  inc() {\n    return new RetryObject(this.request.clone(), this.retries + 1);\n  }\n}\n\nclass RetryQueue {\n  constructor() {\n    this.timeout = null;\n    this.resetDelay();\n    this.queue = new Heap({\n      compar: (a, b) => (a.retries <= b.retries ? -1 : 1)\n    });\n  }\n\n  resetDelay() {\n    this.delay = 200;\n  }\n\n  run() {\n    console.log('RetryQueue: run()', this);\n    if (this.queue.length === 0) {\n      this.abort();\n      return;\n    }\n\n    const next = this.queue.shift();\n    console.log('RetryQueue: run next=', next);\n    // Really stupidly naive implementation. Ignores retry count for now,\n    // doesn't work on a per-request basis but globally and only exponentially\n    // increases the retry delay without an upper bound.\n    const nextPlusOne = next.inc();\n    fetch(next.request).then(this.resetDelay.bind(this)).catch(e => {\n      console.error('SW Fetch error', e);\n      this.delay *= 2;\n      this.queue.push(nextPlusOne);\n    });\n    this.timeout = setTimeout(this.run.bind(this), this.delay);\n  }\n\n  abort() {\n    console.log('RetryQueue: abort()');\n    clearTimeout(this.timeout);\n    this.timeout = null;\n    this.resetDelay();\n  }\n\n  insert(request) {\n    this.queue.push(new RetryObject(request.clone()));\n    this.run();\n  }\n}\nconst retryQueue = new RetryQueue();\n\n// General caching\nself.addEventListener('fetch', event => {\n  const url = new URL(event.request.url);\n  if (url.pathname.startsWith('/oauth/proxy/twitter/https%3A%2F%2Fapi.twitter.com%2F1.1%2Ffavorites%2Fcreate.json')) {\n    console.log('sw', 'is fav', event.request.url);\n    const request = event.request.clone();\n    event.respondWith(\n      fetch(event.request).catch(retryQueue.insert.bind(retryQueue, request))\n    );\n    return;\n  }\n\n  event.respondWith(\n    caches.match(event.request).then(response =>\n      response || fetch(event.request))\n  );\n});\n\nvar validCaches = [\n  'twoffline-static-v7'\n];\n\nself.addEventListener('activate', function (event) {\n  // remove caches beginning \"twoffline-\" that aren't in\n  // validCaches\n  event.waitUntil(\n    caches.keys().then(function(cacheNames) {\n      return Promise.all(\n        cacheNames.map(function(cacheName) {\n          if (!/^twoffline-/.test(cacheName)) {\n            return;\n          }\n          if (validCaches.indexOf(cacheName) == -1) {\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    draining = true;\n    var currentQueue;\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        var i = -1;\n        while (++i < len) {\n            currentQueue[i]();\n        }\n        len = queue.length;\n    }\n    draining = false;\n}\nprocess.nextTick = function (fun) {\n    queue.push(fun);\n    if (!draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","module.exports = require('./lib/qheap.js');\n","/**\n * nodejs heap, classic array implementation\n *\n * Items are stored in a balanced binary tree packed into an array where\n * node is at [i], left child is at [2*i], right at [2*i+1].  Root is at [1].\n *\n * Copyright (C) 2014 Andras Radics\n * Licensed under the Apache License, Version 2.0\n */\n\n'use strict';\n\nmodule.exports = Heap;\n\nfunction Heap( opts ) {\n    opts = opts || {};\n    this._comparFunc = opts.compar || function(a, b) { return a < b ? -1 : 1 };\n    this._list = new Array(100);\n    this._freeSpace = opts.freeSpace ? this._trimArraySize : false;\n    this.length = 0;\n}\n\nHeap.prototype._swap = function Heap_swap( i, j ) {\n    var t = this._list[i];\n    this._list[i] = this._list[j];\n    this._list[j] = t;\n}\n\nHeap.prototype.insert = function Heap_insert( item ) {\n    // insert new item at end, and bubble up\n    var list = this._list;\n    var comparfn = this._comparFunc;\n    var idx = (this.length += 1);\n    // runs 5% faster with this redundant insert (prefetch?)\n    list[idx] = item;\n\n    while (idx > 1) {\n        var parentval = list[idx >> 1];\n        if (comparfn(item, parentval) < 0) {\n            list[idx] = parentval;\n            idx = idx >> 1;\n        }\n        else break;\n    }\n    list[idx] = item;\n};\nHeap.prototype.append = Heap.prototype.insert;\nHeap.prototype.push = Heap.prototype.insert;\n\nHeap.prototype.peek = function Heap_peek( ) {\n    return this._list[1];\n};\n\nHeap.prototype.remove = function Heap_remove( ) {\n    var len = this.length;\n    if (len < 1) return undefined;\n    var list = this._list;\n    var ret = list[1];\n\n    var item = list[len];\n    list[len] = undefined;\n    this.length = (len -= 1);\n\n    // removing the root item left a hole.  We fill fill it by\n    // sliding up the least-values path all the way from the leaf node,\n    // then moving the very last item into that leaf position and bubbling\n    // it up from there.  Splitting into slide + bubbleup is 20% faster\n    // for a sequence of repeated insert/removes than the classic combined\n    // bubble-down with 3-way min() test (caching effect?  The least-values\n    // path is more likely to be reused, ie remain cache resident.)\n    if (len > 0) {\n        var comparfn = this._comparFunc;\n        var idx, child;\n        for (idx = 1, child = 2; child <= len; child = child << 1) {\n            if (child < len && comparfn(list[child+1], list[child]) < 0) child += 1;\n            list[idx] = list[child];\n            idx = child;\n        }\n        // idx points to the just vacated leaf node, bubble up item from there\n        while (idx > 1) {\n            var parentval = list[idx >> 1];\n            if (comparfn(item, parentval) < 0) {\n                list[idx] = parentval;\n                idx = idx >> 1;\n            }\n            else break;\n        }\n        list[idx] = item;\n        if (this._freeSpace) this._freeSpace(list, len);\n    }\n\n    return ret;\n};\nHeap.prototype.shift = Heap.prototype.remove;\n\nHeap.prototype._trimArraySize = function Heap__trimArraySize( list, len ) {\n    if (len > 10000 && list.length > 4 * len) {\n        // use slice to actually free memory; 7% slower than setting .length\n        // note: list.slice makes the array slower to insert to??  splice is better\n        list.splice(len+1, list.length);\n    }\n}\n\nHeap.prototype._check = function Heap__check( ) {\n    var comparfn = this._comparFunc;\n    var compar = function(a,b) { return comparfn(a, b); }\n    var i, fail = 0;\n    for (i=this.length; i>1; i--) {\n        // error if parent should go after child, but not if don`t care\n        if (compar((i/2|0), i) > 0 && this._compar(i, (i/2|0)) < 0) fail = i;\n    }\n    if (fail) console.log(\"failed at\", (fail/2|0), fail);\n    return !fail;\n}\n","/*!\n * @overview RSVP - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/tildeio/rsvp.js/master/LICENSE\n * @version   3.0.14\n */\n\n(function() {\n    \"use strict\";\n\n    function $$rsvp$events$$indexOf(callbacks, callback) {\n      for (var i=0, l=callbacks.length; i<l; i++) {\n        if (callbacks[i] === callback) { return i; }\n      }\n\n      return -1;\n    }\n\n    function $$rsvp$events$$callbacksFor(object) {\n      var callbacks = object._promiseCallbacks;\n\n      if (!callbacks) {\n        callbacks = object._promiseCallbacks = {};\n      }\n\n      return callbacks;\n    }\n\n    var $$rsvp$events$$default = {\n\n      /**\n        `RSVP.EventTarget.mixin` extends an object with EventTarget methods. For\n        Example:\n\n        ```javascript\n        var object = {};\n\n        RSVP.EventTarget.mixin(object);\n\n        object.on('finished', function(event) {\n          // handle event\n        });\n\n        object.trigger('finished', { detail: value });\n        ```\n\n        `EventTarget.mixin` also works with prototypes:\n\n        ```javascript\n        var Person = function() {};\n        RSVP.EventTarget.mixin(Person.prototype);\n\n        var yehuda = new Person();\n        var tom = new Person();\n\n        yehuda.on('poke', function(event) {\n          console.log('Yehuda says OW');\n        });\n\n        tom.on('poke', function(event) {\n          console.log('Tom says OW');\n        });\n\n        yehuda.trigger('poke');\n        tom.trigger('poke');\n        ```\n\n        @method mixin\n        @for RSVP.EventTarget\n        @private\n        @param {Object} object object to extend with EventTarget methods\n      */\n      mixin: function(object) {\n        object.on = this.on;\n        object.off = this.off;\n        object.trigger = this.trigger;\n        object._promiseCallbacks = undefined;\n        return object;\n      },\n\n      /**\n        Registers a callback to be executed when `eventName` is triggered\n\n        ```javascript\n        object.on('event', function(eventInfo){\n          // handle the event\n        });\n\n        object.trigger('event');\n        ```\n\n        @method on\n        @for RSVP.EventTarget\n        @private\n        @param {String} eventName name of the event to listen for\n        @param {Function} callback function to be called when the event is triggered.\n      */\n      on: function(eventName, callback) {\n        var allCallbacks = $$rsvp$events$$callbacksFor(this), callbacks;\n\n        callbacks = allCallbacks[eventName];\n\n        if (!callbacks) {\n          callbacks = allCallbacks[eventName] = [];\n        }\n\n        if ($$rsvp$events$$indexOf(callbacks, callback) === -1) {\n          callbacks.push(callback);\n        }\n      },\n\n      /**\n        You can use `off` to stop firing a particular callback for an event:\n\n        ```javascript\n        function doStuff() { // do stuff! }\n        object.on('stuff', doStuff);\n\n        object.trigger('stuff'); // doStuff will be called\n\n        // Unregister ONLY the doStuff callback\n        object.off('stuff', doStuff);\n        object.trigger('stuff'); // doStuff will NOT be called\n        ```\n\n        If you don't pass a `callback` argument to `off`, ALL callbacks for the\n        event will not be executed when the event fires. For example:\n\n        ```javascript\n        var callback1 = function(){};\n        var callback2 = function(){};\n\n        object.on('stuff', callback1);\n        object.on('stuff', callback2);\n\n        object.trigger('stuff'); // callback1 and callback2 will be executed.\n\n        object.off('stuff');\n        object.trigger('stuff'); // callback1 and callback2 will not be executed!\n        ```\n\n        @method off\n        @for RSVP.EventTarget\n        @private\n        @param {String} eventName event to stop listening to\n        @param {Function} callback optional argument. If given, only the function\n        given will be removed from the event's callback queue. If no `callback`\n        argument is given, all callbacks will be removed from the event's callback\n        queue.\n      */\n      off: function(eventName, callback) {\n        var allCallbacks = $$rsvp$events$$callbacksFor(this), callbacks, index;\n\n        if (!callback) {\n          allCallbacks[eventName] = [];\n          return;\n        }\n\n        callbacks = allCallbacks[eventName];\n\n        index = $$rsvp$events$$indexOf(callbacks, callback);\n\n        if (index !== -1) { callbacks.splice(index, 1); }\n      },\n\n      /**\n        Use `trigger` to fire custom events. For example:\n\n        ```javascript\n        object.on('foo', function(){\n          console.log('foo event happened!');\n        });\n        object.trigger('foo');\n        // 'foo event happened!' logged to the console\n        ```\n\n        You can also pass a value as a second argument to `trigger` that will be\n        passed as an argument to all event listeners for the event:\n\n        ```javascript\n        object.on('foo', function(value){\n          console.log(value.name);\n        });\n\n        object.trigger('foo', { name: 'bar' });\n        // 'bar' logged to the console\n        ```\n\n        @method trigger\n        @for RSVP.EventTarget\n        @private\n        @param {String} eventName name of the event to be triggered\n        @param {Any} options optional value to be passed to any event handlers for\n        the given `eventName`\n      */\n      trigger: function(eventName, options) {\n        var allCallbacks = $$rsvp$events$$callbacksFor(this), callbacks, callback;\n\n        if (callbacks = allCallbacks[eventName]) {\n          // Don't cache the callbacks.length since it may grow\n          for (var i=0; i<callbacks.length; i++) {\n            callback = callbacks[i];\n\n            callback(options);\n          }\n        }\n      }\n    };\n\n    var $$rsvp$config$$config = {\n      instrument: false\n    };\n\n    $$rsvp$events$$default.mixin($$rsvp$config$$config);\n\n    function $$rsvp$config$$configure(name, value) {\n      if (name === 'onerror') {\n        // handle for legacy users that expect the actual\n        // error to be passed to their function added via\n        // `RSVP.configure('onerror', someFunctionHere);`\n        $$rsvp$config$$config.on('error', value);\n        return;\n      }\n\n      if (arguments.length === 2) {\n        $$rsvp$config$$config[name] = value;\n      } else {\n        return $$rsvp$config$$config[name];\n      }\n    }\n\n    function $$utils$$objectOrFunction(x) {\n      return typeof x === 'function' || (typeof x === 'object' && x !== null);\n    }\n\n    function $$utils$$isFunction(x) {\n      return typeof x === 'function';\n    }\n\n    function $$utils$$isMaybeThenable(x) {\n      return typeof x === 'object' && x !== null;\n    }\n\n    var $$utils$$_isArray;\n\n    if (!Array.isArray) {\n      $$utils$$_isArray = function (x) {\n        return Object.prototype.toString.call(x) === '[object Array]';\n      };\n    } else {\n      $$utils$$_isArray = Array.isArray;\n    }\n\n    var $$utils$$isArray = $$utils$$_isArray;\n    var $$utils$$now = Date.now || function() { return new Date().getTime(); };\n    function $$utils$$F() { }\n\n    var $$utils$$o_create = (Object.create || function (o) {\n      if (arguments.length > 1) {\n        throw new Error('Second argument not supported');\n      }\n      if (typeof o !== 'object') {\n        throw new TypeError('Argument must be an object');\n      }\n      $$utils$$F.prototype = o;\n      return new $$utils$$F();\n    });\n\n    var $$instrument$$queue = [];\n\n    var $$instrument$$default = function instrument(eventName, promise, child) {\n      if (1 === $$instrument$$queue.push({\n          name: eventName,\n          payload: {\n            guid: promise._guidKey + promise._id,\n            eventName: eventName,\n            detail: promise._result,\n            childGuid: child && promise._guidKey + child._id,\n            label: promise._label,\n            timeStamp: $$utils$$now(),\n            stack: new Error(promise._label).stack\n          }})) {\n\n            setTimeout(function() {\n              var entry;\n              for (var i = 0; i < $$instrument$$queue.length; i++) {\n                entry = $$instrument$$queue[i];\n                $$rsvp$config$$config.trigger(entry.name, entry.payload);\n              }\n              $$instrument$$queue.length = 0;\n            }, 50);\n          }\n      };\n\n    function $$$internal$$noop() {}\n    var $$$internal$$PENDING   = void 0;\n    var $$$internal$$FULFILLED = 1;\n    var $$$internal$$REJECTED  = 2;\n    var $$$internal$$GET_THEN_ERROR = new $$$internal$$ErrorObject();\n\n    function $$$internal$$getThen(promise) {\n      try {\n        return promise.then;\n      } catch(error) {\n        $$$internal$$GET_THEN_ERROR.error = error;\n        return $$$internal$$GET_THEN_ERROR;\n      }\n    }\n\n    function $$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {\n      try {\n        then.call(value, fulfillmentHandler, rejectionHandler);\n      } catch(e) {\n        return e;\n      }\n    }\n\n    function $$$internal$$handleForeignThenable(promise, thenable, then) {\n      $$rsvp$config$$config.async(function(promise) {\n        var sealed = false;\n        var error = $$$internal$$tryThen(then, thenable, function(value) {\n          if (sealed) { return; }\n          sealed = true;\n          if (thenable !== value) {\n            $$$internal$$resolve(promise, value);\n          } else {\n            $$$internal$$fulfill(promise, value);\n          }\n        }, function(reason) {\n          if (sealed) { return; }\n          sealed = true;\n\n          $$$internal$$reject(promise, reason);\n        }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n        if (!sealed && error) {\n          sealed = true;\n          $$$internal$$reject(promise, error);\n        }\n      }, promise);\n    }\n\n    function $$$internal$$handleOwnThenable(promise, thenable) {\n      if (thenable._state === $$$internal$$FULFILLED) {\n        $$$internal$$fulfill(promise, thenable._result);\n      } else if (promise._state === $$$internal$$REJECTED) {\n        $$$internal$$reject(promise, thenable._result);\n      } else {\n        $$$internal$$subscribe(thenable, undefined, function(value) {\n          if (thenable !== value) {\n            $$$internal$$resolve(promise, value);\n          } else {\n            $$$internal$$fulfill(promise, value);\n          }\n        }, function(reason) {\n          $$$internal$$reject(promise, reason);\n        });\n      }\n    }\n\n    function $$$internal$$handleMaybeThenable(promise, maybeThenable) {\n      if (maybeThenable.constructor === promise.constructor) {\n        $$$internal$$handleOwnThenable(promise, maybeThenable);\n      } else {\n        var then = $$$internal$$getThen(maybeThenable);\n\n        if (then === $$$internal$$GET_THEN_ERROR) {\n          $$$internal$$reject(promise, $$$internal$$GET_THEN_ERROR.error);\n        } else if (then === undefined) {\n          $$$internal$$fulfill(promise, maybeThenable);\n        } else if ($$utils$$isFunction(then)) {\n          $$$internal$$handleForeignThenable(promise, maybeThenable, then);\n        } else {\n          $$$internal$$fulfill(promise, maybeThenable);\n        }\n      }\n    }\n\n    function $$$internal$$resolve(promise, value) {\n      if (promise === value) {\n        $$$internal$$fulfill(promise, value);\n      } else if ($$utils$$objectOrFunction(value)) {\n        $$$internal$$handleMaybeThenable(promise, value);\n      } else {\n        $$$internal$$fulfill(promise, value);\n      }\n    }\n\n    function $$$internal$$publishRejection(promise) {\n      if (promise._onerror) {\n        promise._onerror(promise._result);\n      }\n\n      $$$internal$$publish(promise);\n    }\n\n    function $$$internal$$fulfill(promise, value) {\n      if (promise._state !== $$$internal$$PENDING) { return; }\n\n      promise._result = value;\n      promise._state = $$$internal$$FULFILLED;\n\n      if (promise._subscribers.length === 0) {\n        if ($$rsvp$config$$config.instrument) {\n          $$instrument$$default('fulfilled', promise);\n        }\n      } else {\n        $$rsvp$config$$config.async($$$internal$$publish, promise);\n      }\n    }\n\n    function $$$internal$$reject(promise, reason) {\n      if (promise._state !== $$$internal$$PENDING) { return; }\n      promise._state = $$$internal$$REJECTED;\n      promise._result = reason;\n\n      $$rsvp$config$$config.async($$$internal$$publishRejection, promise);\n    }\n\n    function $$$internal$$subscribe(parent, child, onFulfillment, onRejection) {\n      var subscribers = parent._subscribers;\n      var length = subscribers.length;\n\n      parent._onerror = null;\n\n      subscribers[length] = child;\n      subscribers[length + $$$internal$$FULFILLED] = onFulfillment;\n      subscribers[length + $$$internal$$REJECTED]  = onRejection;\n\n      if (length === 0 && parent._state) {\n        $$rsvp$config$$config.async($$$internal$$publish, parent);\n      }\n    }\n\n    function $$$internal$$publish(promise) {\n      var subscribers = promise._subscribers;\n      var settled = promise._state;\n\n      if ($$rsvp$config$$config.instrument) {\n        $$instrument$$default(settled === $$$internal$$FULFILLED ? 'fulfilled' : 'rejected', promise);\n      }\n\n      if (subscribers.length === 0) { return; }\n\n      var child, callback, detail = promise._result;\n\n      for (var i = 0; i < subscribers.length; i += 3) {\n        child = subscribers[i];\n        callback = subscribers[i + settled];\n\n        if (child) {\n          $$$internal$$invokeCallback(settled, child, callback, detail);\n        } else {\n          callback(detail);\n        }\n      }\n\n      promise._subscribers.length = 0;\n    }\n\n    function $$$internal$$ErrorObject() {\n      this.error = null;\n    }\n\n    var $$$internal$$TRY_CATCH_ERROR = new $$$internal$$ErrorObject();\n\n    function $$$internal$$tryCatch(callback, detail) {\n      try {\n        return callback(detail);\n      } catch(e) {\n        $$$internal$$TRY_CATCH_ERROR.error = e;\n        return $$$internal$$TRY_CATCH_ERROR;\n      }\n    }\n\n    function $$$internal$$invokeCallback(settled, promise, callback, detail) {\n      var hasCallback = $$utils$$isFunction(callback),\n          value, error, succeeded, failed;\n\n      if (hasCallback) {\n        value = $$$internal$$tryCatch(callback, detail);\n\n        if (value === $$$internal$$TRY_CATCH_ERROR) {\n          failed = true;\n          error = value.error;\n          value = null;\n        } else {\n          succeeded = true;\n        }\n\n        if (promise === value) {\n          $$$internal$$reject(promise, new TypeError('A promises callback cannot return that same promise.'));\n          return;\n        }\n\n      } else {\n        value = detail;\n        succeeded = true;\n      }\n\n      if (promise._state !== $$$internal$$PENDING) {\n        // noop\n      } else if (hasCallback && succeeded) {\n        $$$internal$$resolve(promise, value);\n      } else if (failed) {\n        $$$internal$$reject(promise, error);\n      } else if (settled === $$$internal$$FULFILLED) {\n        $$$internal$$fulfill(promise, value);\n      } else if (settled === $$$internal$$REJECTED) {\n        $$$internal$$reject(promise, value);\n      }\n    }\n\n    function $$$internal$$initializePromise(promise, resolver) {\n      try {\n        resolver(function resolvePromise(value){\n          $$$internal$$resolve(promise, value);\n        }, function rejectPromise(reason) {\n          $$$internal$$reject(promise, reason);\n        });\n      } catch(e) {\n        $$$internal$$reject(promise, e);\n      }\n    }\n\n    function $$enumerator$$makeSettledResult(state, position, value) {\n      if (state === $$$internal$$FULFILLED) {\n        return {\n          state: 'fulfilled',\n          value: value\n        };\n      } else {\n        return {\n          state: 'rejected',\n          reason: value\n        };\n      }\n    }\n\n    function $$enumerator$$Enumerator(Constructor, input, abortOnReject, label) {\n      this._instanceConstructor = Constructor;\n      this.promise = new Constructor($$$internal$$noop, label);\n      this._abortOnReject = abortOnReject;\n\n      if (this._validateInput(input)) {\n        this._input     = input;\n        this.length     = input.length;\n        this._remaining = input.length;\n\n        this._init();\n\n        if (this.length === 0) {\n          $$$internal$$fulfill(this.promise, this._result);\n        } else {\n          this.length = this.length || 0;\n          this._enumerate();\n          if (this._remaining === 0) {\n            $$$internal$$fulfill(this.promise, this._result);\n          }\n        }\n      } else {\n        $$$internal$$reject(this.promise, this._validationError());\n      }\n    }\n\n    $$enumerator$$Enumerator.prototype._validateInput = function(input) {\n      return $$utils$$isArray(input);\n    };\n\n    $$enumerator$$Enumerator.prototype._validationError = function() {\n      return new Error('Array Methods must be provided an Array');\n    };\n\n    $$enumerator$$Enumerator.prototype._init = function() {\n      this._result = new Array(this.length);\n    };\n\n    var $$enumerator$$default = $$enumerator$$Enumerator;\n\n    $$enumerator$$Enumerator.prototype._enumerate = function() {\n      var length  = this.length;\n      var promise = this.promise;\n      var input   = this._input;\n\n      for (var i = 0; promise._state === $$$internal$$PENDING && i < length; i++) {\n        this._eachEntry(input[i], i);\n      }\n    };\n\n    $$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {\n      var c = this._instanceConstructor;\n      if ($$utils$$isMaybeThenable(entry)) {\n        if (entry.constructor === c && entry._state !== $$$internal$$PENDING) {\n          entry._onerror = null;\n          this._settledAt(entry._state, i, entry._result);\n        } else {\n          this._willSettleAt(c.resolve(entry), i);\n        }\n      } else {\n        this._remaining--;\n        this._result[i] = this._makeResult($$$internal$$FULFILLED, i, entry);\n      }\n    };\n\n    $$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {\n      var promise = this.promise;\n\n      if (promise._state === $$$internal$$PENDING) {\n        this._remaining--;\n\n        if (this._abortOnReject && state === $$$internal$$REJECTED) {\n          $$$internal$$reject(promise, value);\n        } else {\n          this._result[i] = this._makeResult(state, i, value);\n        }\n      }\n\n      if (this._remaining === 0) {\n        $$$internal$$fulfill(promise, this._result);\n      }\n    };\n\n    $$enumerator$$Enumerator.prototype._makeResult = function(state, i, value) {\n      return value;\n    };\n\n    $$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {\n      var enumerator = this;\n\n      $$$internal$$subscribe(promise, undefined, function(value) {\n        enumerator._settledAt($$$internal$$FULFILLED, i, value);\n      }, function(reason) {\n        enumerator._settledAt($$$internal$$REJECTED, i, reason);\n      });\n    };\n\n    var $$promise$all$$default = function all(entries, label) {\n      return new $$enumerator$$default(this, entries, true /* abort on reject */, label).promise;\n    };\n\n    var $$promise$race$$default = function race(entries, label) {\n      /*jshint validthis:true */\n      var Constructor = this;\n\n      var promise = new Constructor($$$internal$$noop, label);\n\n      if (!$$utils$$isArray(entries)) {\n        $$$internal$$reject(promise, new TypeError('You must pass an array to race.'));\n        return promise;\n      }\n\n      var length = entries.length;\n\n      function onFulfillment(value) {\n        $$$internal$$resolve(promise, value);\n      }\n\n      function onRejection(reason) {\n        $$$internal$$reject(promise, reason);\n      }\n\n      for (var i = 0; promise._state === $$$internal$$PENDING && i < length; i++) {\n        $$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);\n      }\n\n      return promise;\n    };\n\n    var $$promise$resolve$$default = function resolve(object, label) {\n      /*jshint validthis:true */\n      var Constructor = this;\n\n      if (object && typeof object === 'object' && object.constructor === Constructor) {\n        return object;\n      }\n\n      var promise = new Constructor($$$internal$$noop, label);\n      $$$internal$$resolve(promise, object);\n      return promise;\n    };\n\n    var $$promise$reject$$default = function reject(reason, label) {\n      /*jshint validthis:true */\n      var Constructor = this;\n      var promise = new Constructor($$$internal$$noop, label);\n      $$$internal$$reject(promise, reason);\n      return promise;\n    };\n\n    var $$rsvp$promise$$guidKey = 'rsvp_' + $$utils$$now() + '-';\n    var $$rsvp$promise$$counter = 0;\n\n    function $$rsvp$promise$$needsResolver() {\n      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n    }\n\n    function $$rsvp$promise$$needsNew() {\n      throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n    }\n\n    var $$rsvp$promise$$default = $$rsvp$promise$$Promise;\n\n    /**\n      Promise objects represent the eventual result of an asynchronous operation. The\n      primary way of interacting with a promise is through its `then` method, which\n      registers callbacks to receive either a promise’s eventual value or the reason\n      why the promise cannot be fulfilled.\n\n      Terminology\n      -----------\n\n      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n      - `thenable` is an object or function that defines a `then` method.\n      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n      - `exception` is a value that is thrown using the throw statement.\n      - `reason` is a value that indicates why a promise was rejected.\n      - `settled` the final resting state of a promise, fulfilled or rejected.\n\n      A promise can be in one of three states: pending, fulfilled, or rejected.\n\n      Promises that are fulfilled have a fulfillment value and are in the fulfilled\n      state.  Promises that are rejected have a rejection reason and are in the\n      rejected state.  A fulfillment value is never a thenable.\n\n      Promises can also be said to *resolve* a value.  If this value is also a\n      promise, then the original promise's settled state will match the value's\n      settled state.  So a promise that *resolves* a promise that rejects will\n      itself reject, and a promise that *resolves* a promise that fulfills will\n      itself fulfill.\n\n\n      Basic Usage:\n      ------------\n\n      ```js\n      var promise = new Promise(function(resolve, reject) {\n        // on success\n        resolve(value);\n\n        // on failure\n        reject(reason);\n      });\n\n      promise.then(function(value) {\n        // on fulfillment\n      }, function(reason) {\n        // on rejection\n      });\n      ```\n\n      Advanced Usage:\n      ---------------\n\n      Promises shine when abstracting away asynchronous interactions such as\n      `XMLHttpRequest`s.\n\n      ```js\n      function getJSON(url) {\n        return new Promise(function(resolve, reject){\n          var xhr = new XMLHttpRequest();\n\n          xhr.open('GET', url);\n          xhr.onreadystatechange = handler;\n          xhr.responseType = 'json';\n          xhr.setRequestHeader('Accept', 'application/json');\n          xhr.send();\n\n          function handler() {\n            if (this.readyState === this.DONE) {\n              if (this.status === 200) {\n                resolve(this.response);\n              } else {\n                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n              }\n            }\n          };\n        });\n      }\n\n      getJSON('/posts.json').then(function(json) {\n        // on fulfillment\n      }, function(reason) {\n        // on rejection\n      });\n      ```\n\n      Unlike callbacks, promises are great composable primitives.\n\n      ```js\n      Promise.all([\n        getJSON('/posts'),\n        getJSON('/comments')\n      ]).then(function(values){\n        values[0] // => postsJSON\n        values[1] // => commentsJSON\n\n        return values;\n      });\n      ```\n\n      @class RSVP.Promise\n      @param {function} resolver\n      @param {String} label optional string for labeling the promise.\n      Useful for tooling.\n      @constructor\n    */\n    function $$rsvp$promise$$Promise(resolver, label) {\n      this._id = $$rsvp$promise$$counter++;\n      this._label = label;\n      this._state = undefined;\n      this._result = undefined;\n      this._subscribers = [];\n\n      if ($$rsvp$config$$config.instrument) {\n        $$instrument$$default('created', this);\n      }\n\n      if ($$$internal$$noop !== resolver) {\n        if (!$$utils$$isFunction(resolver)) {\n          $$rsvp$promise$$needsResolver();\n        }\n\n        if (!(this instanceof $$rsvp$promise$$Promise)) {\n          $$rsvp$promise$$needsNew();\n        }\n\n        $$$internal$$initializePromise(this, resolver);\n      }\n    }\n\n    // deprecated\n    $$rsvp$promise$$Promise.cast = $$promise$resolve$$default;\n\n    $$rsvp$promise$$Promise.all = $$promise$all$$default;\n    $$rsvp$promise$$Promise.race = $$promise$race$$default;\n    $$rsvp$promise$$Promise.resolve = $$promise$resolve$$default;\n    $$rsvp$promise$$Promise.reject = $$promise$reject$$default;\n\n    $$rsvp$promise$$Promise.prototype = {\n      constructor: $$rsvp$promise$$Promise,\n\n      _guidKey: $$rsvp$promise$$guidKey,\n\n      _onerror: function (reason) {\n        $$rsvp$config$$config.trigger('error', reason);\n      },\n\n    /**\n      The primary way of interacting with a promise is through its `then` method,\n      which registers callbacks to receive either a promise's eventual value or the\n      reason why the promise cannot be fulfilled.\n\n      ```js\n      findUser().then(function(user){\n        // user is available\n      }, function(reason){\n        // user is unavailable, and you are given the reason why\n      });\n      ```\n\n      Chaining\n      --------\n\n      The return value of `then` is itself a promise.  This second, 'downstream'\n      promise is resolved with the return value of the first promise's fulfillment\n      or rejection handler, or rejected if the handler throws an exception.\n\n      ```js\n      findUser().then(function (user) {\n        return user.name;\n      }, function (reason) {\n        return 'default name';\n      }).then(function (userName) {\n        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n        // will be `'default name'`\n      });\n\n      findUser().then(function (user) {\n        throw new Error('Found user, but still unhappy');\n      }, function (reason) {\n        throw new Error('`findUser` rejected and we're unhappy');\n      }).then(function (value) {\n        // never reached\n      }, function (reason) {\n        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n      });\n      ```\n      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n\n      ```js\n      findUser().then(function (user) {\n        throw new PedagogicalException('Upstream error');\n      }).then(function (value) {\n        // never reached\n      }).then(function (value) {\n        // never reached\n      }, function (reason) {\n        // The `PedgagocialException` is propagated all the way down to here\n      });\n      ```\n\n      Assimilation\n      ------------\n\n      Sometimes the value you want to propagate to a downstream promise can only be\n      retrieved asynchronously. This can be achieved by returning a promise in the\n      fulfillment or rejection handler. The downstream promise will then be pending\n      until the returned promise is settled. This is called *assimilation*.\n\n      ```js\n      findUser().then(function (user) {\n        return findCommentsByAuthor(user);\n      }).then(function (comments) {\n        // The user's comments are now available\n      });\n      ```\n\n      If the assimliated promise rejects, then the downstream promise will also reject.\n\n      ```js\n      findUser().then(function (user) {\n        return findCommentsByAuthor(user);\n      }).then(function (comments) {\n        // If `findCommentsByAuthor` fulfills, we'll have the value here\n      }, function (reason) {\n        // If `findCommentsByAuthor` rejects, we'll have the reason here\n      });\n      ```\n\n      Simple Example\n      --------------\n\n      Synchronous Example\n\n      ```javascript\n      var result;\n\n      try {\n        result = findResult();\n        // success\n      } catch(reason) {\n        // failure\n      }\n      ```\n\n      Errback Example\n\n      ```js\n      findResult(function(result, err){\n        if (err) {\n          // failure\n        } else {\n          // success\n        }\n      });\n      ```\n\n      Promise Example;\n\n      ```javascript\n      findResult().then(function(result){\n        // success\n      }, function(reason){\n        // failure\n      });\n      ```\n\n      Advanced Example\n      --------------\n\n      Synchronous Example\n\n      ```javascript\n      var author, books;\n\n      try {\n        author = findAuthor();\n        books  = findBooksByAuthor(author);\n        // success\n      } catch(reason) {\n        // failure\n      }\n      ```\n\n      Errback Example\n\n      ```js\n\n      function foundBooks(books) {\n\n      }\n\n      function failure(reason) {\n\n      }\n\n      findAuthor(function(author, err){\n        if (err) {\n          failure(err);\n          // failure\n        } else {\n          try {\n            findBoooksByAuthor(author, function(books, err) {\n              if (err) {\n                failure(err);\n              } else {\n                try {\n                  foundBooks(books);\n                } catch(reason) {\n                  failure(reason);\n                }\n              }\n            });\n          } catch(error) {\n            failure(err);\n          }\n          // success\n        }\n      });\n      ```\n\n      Promise Example;\n\n      ```javascript\n      findAuthor().\n        then(findBooksByAuthor).\n        then(function(books){\n          // found books\n      }).catch(function(reason){\n        // something went wrong\n      });\n      ```\n\n      @method then\n      @param {Function} onFulfilled\n      @param {Function} onRejected\n      @param {String} label optional string for labeling the promise.\n      Useful for tooling.\n      @return {Promise}\n    */\n      then: function(onFulfillment, onRejection, label) {\n        var parent = this;\n        var state = parent._state;\n\n        if (state === $$$internal$$FULFILLED && !onFulfillment || state === $$$internal$$REJECTED && !onRejection) {\n          if ($$rsvp$config$$config.instrument) {\n            $$instrument$$default('chained', this, this);\n          }\n          return this;\n        }\n\n        parent._onerror = null;\n\n        var child = new this.constructor($$$internal$$noop, label);\n        var result = parent._result;\n\n        if ($$rsvp$config$$config.instrument) {\n          $$instrument$$default('chained', parent, child);\n        }\n\n        if (state) {\n          var callback = arguments[state - 1];\n          $$rsvp$config$$config.async(function(){\n            $$$internal$$invokeCallback(state, child, callback, result);\n          });\n        } else {\n          $$$internal$$subscribe(parent, child, onFulfillment, onRejection);\n        }\n\n        return child;\n      },\n\n    /**\n      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n      as the catch block of a try/catch statement.\n\n      ```js\n      function findAuthor(){\n        throw new Error('couldn't find that author');\n      }\n\n      // synchronous\n      try {\n        findAuthor();\n      } catch(reason) {\n        // something went wrong\n      }\n\n      // async with promises\n      findAuthor().catch(function(reason){\n        // something went wrong\n      });\n      ```\n\n      @method catch\n      @param {Function} onRejection\n      @param {String} label optional string for labeling the promise.\n      Useful for tooling.\n      @return {Promise}\n    */\n      'catch': function(onRejection, label) {\n        return this.then(null, onRejection, label);\n      },\n\n    /**\n      `finally` will be invoked regardless of the promise's fate just as native\n      try/catch/finally behaves\n\n      Synchronous example:\n\n      ```js\n      findAuthor() {\n        if (Math.random() > 0.5) {\n          throw new Error();\n        }\n        return new Author();\n      }\n\n      try {\n        return findAuthor(); // succeed or fail\n      } catch(error) {\n        return findOtherAuther();\n      } finally {\n        // always runs\n        // doesn't affect the return value\n      }\n      ```\n\n      Asynchronous example:\n\n      ```js\n      findAuthor().catch(function(reason){\n        return findOtherAuther();\n      }).finally(function(){\n        // author was either found, or not\n      });\n      ```\n\n      @method finally\n      @param {Function} callback\n      @param {String} label optional string for labeling the promise.\n      Useful for tooling.\n      @return {Promise}\n    */\n      'finally': function(callback, label) {\n        var constructor = this.constructor;\n\n        return this.then(function(value) {\n          return constructor.resolve(callback()).then(function(){\n            return value;\n          });\n        }, function(reason) {\n          return constructor.resolve(callback()).then(function(){\n            throw reason;\n          });\n        }, label);\n      }\n    };\n\n    function $$rsvp$node$$Result() {\n      this.value = undefined;\n    }\n\n    var $$rsvp$node$$ERROR = new $$rsvp$node$$Result();\n    var $$rsvp$node$$GET_THEN_ERROR = new $$rsvp$node$$Result();\n\n    function $$rsvp$node$$getThen(obj) {\n      try {\n       return obj.then;\n      } catch(error) {\n        $$rsvp$node$$ERROR.value= error;\n        return $$rsvp$node$$ERROR;\n      }\n    }\n\n    function $$rsvp$node$$tryApply(f, s, a) {\n      try {\n        f.apply(s, a);\n      } catch(error) {\n        $$rsvp$node$$ERROR.value = error;\n        return $$rsvp$node$$ERROR;\n      }\n    }\n\n    function $$rsvp$node$$makeObject(_, argumentNames) {\n      var obj = {};\n      var name;\n      var i;\n      var length = _.length;\n      var args = new Array(length);\n\n      for (var x = 0; x < length; x++) {\n        args[x] = _[x];\n      }\n\n      for (i = 0; i < argumentNames.length; i++) {\n        name = argumentNames[i];\n        obj[name] = args[i + 1];\n      }\n\n      return obj;\n    }\n\n    function $$rsvp$node$$arrayResult(_) {\n      var length = _.length;\n      var args = new Array(length - 1);\n\n      for (var i = 1; i < length; i++) {\n        args[i - 1] = _[i];\n      }\n\n      return args;\n    }\n\n    function $$rsvp$node$$wrapThenable(then, promise) {\n      return {\n        then: function(onFulFillment, onRejection) {\n          return then.call(promise, onFulFillment, onRejection);\n        }\n      };\n    }\n\n    var $$rsvp$node$$default = function denodeify(nodeFunc, options) {\n      var fn = function() {\n        var self = this;\n        var l = arguments.length;\n        var args = new Array(l + 1);\n        var arg;\n        var promiseInput = false;\n\n        for (var i = 0; i < l; ++i) {\n          arg = arguments[i];\n\n          if (!promiseInput) {\n            // TODO: clean this up\n            promiseInput = $$rsvp$node$$needsPromiseInput(arg);\n            if (promiseInput === $$rsvp$node$$GET_THEN_ERROR) {\n              var p = new $$rsvp$promise$$default($$$internal$$noop);\n              $$$internal$$reject(p, $$rsvp$node$$GET_THEN_ERROR.value);\n              return p;\n            } else if (promiseInput && promiseInput !== true) {\n              arg = $$rsvp$node$$wrapThenable(promiseInput, arg);\n            }\n          }\n          args[i] = arg;\n        }\n\n        var promise = new $$rsvp$promise$$default($$$internal$$noop);\n\n        args[l] = function(err, val) {\n          if (err)\n            $$$internal$$reject(promise, err);\n          else if (options === undefined)\n            $$$internal$$resolve(promise, val);\n          else if (options === true)\n            $$$internal$$resolve(promise, $$rsvp$node$$arrayResult(arguments));\n          else if ($$utils$$isArray(options))\n            $$$internal$$resolve(promise, $$rsvp$node$$makeObject(arguments, options));\n          else\n            $$$internal$$resolve(promise, val);\n        };\n\n        if (promiseInput) {\n          return $$rsvp$node$$handlePromiseInput(promise, args, nodeFunc, self);\n        } else {\n          return $$rsvp$node$$handleValueInput(promise, args, nodeFunc, self);\n        }\n      };\n\n      fn.__proto__ = nodeFunc;\n\n      return fn;\n    };\n\n    function $$rsvp$node$$handleValueInput(promise, args, nodeFunc, self) {\n      var result = $$rsvp$node$$tryApply(nodeFunc, self, args);\n      if (result === $$rsvp$node$$ERROR) {\n        $$$internal$$reject(promise, result.value);\n      }\n      return promise;\n    }\n\n    function $$rsvp$node$$handlePromiseInput(promise, args, nodeFunc, self){\n      return $$rsvp$promise$$default.all(args).then(function(args){\n        var result = $$rsvp$node$$tryApply(nodeFunc, self, args);\n        if (result === $$rsvp$node$$ERROR) {\n          $$$internal$$reject(promise, result.value);\n        }\n        return promise;\n      });\n    }\n\n    function $$rsvp$node$$needsPromiseInput(arg) {\n      if (arg && typeof arg === 'object') {\n        if (arg.constructor === $$rsvp$promise$$default) {\n          return true;\n        } else {\n          return $$rsvp$node$$getThen(arg);\n        }\n      } else {\n        return false;\n      }\n    }\n\n    var $$rsvp$all$$default = function all(array, label) {\n      return $$rsvp$promise$$default.all(array, label);\n    };\n\n    function $$rsvp$all$settled$$AllSettled(Constructor, entries, label) {\n      this._superConstructor(Constructor, entries, false /* don't abort on reject */, label);\n    }\n\n    $$rsvp$all$settled$$AllSettled.prototype = $$utils$$o_create($$enumerator$$default.prototype);\n    $$rsvp$all$settled$$AllSettled.prototype._superConstructor = $$enumerator$$default;\n    $$rsvp$all$settled$$AllSettled.prototype._makeResult = $$enumerator$$makeSettledResult;\n\n    $$rsvp$all$settled$$AllSettled.prototype._validationError = function() {\n      return new Error('allSettled must be called with an array');\n    };\n\n    var $$rsvp$all$settled$$default = function allSettled(entries, label) {\n      return new $$rsvp$all$settled$$AllSettled($$rsvp$promise$$default, entries, label).promise;\n    };\n\n    var $$rsvp$race$$default = function race(array, label) {\n      return $$rsvp$promise$$default.race(array, label);\n    };\n\n    function $$promise$hash$$PromiseHash(Constructor, object, label) {\n      this._superConstructor(Constructor, object, true, label);\n    }\n\n    var $$promise$hash$$default = $$promise$hash$$PromiseHash;\n    $$promise$hash$$PromiseHash.prototype = $$utils$$o_create($$enumerator$$default.prototype);\n    $$promise$hash$$PromiseHash.prototype._superConstructor = $$enumerator$$default;\n\n    $$promise$hash$$PromiseHash.prototype._init = function() {\n      this._result = {};\n    };\n\n    $$promise$hash$$PromiseHash.prototype._validateInput = function(input) {\n      return input && typeof input === 'object';\n    };\n\n    $$promise$hash$$PromiseHash.prototype._validationError = function() {\n      return new Error('Promise.hash must be called with an object');\n    };\n\n    $$promise$hash$$PromiseHash.prototype._enumerate = function() {\n      var promise = this.promise;\n      var input   = this._input;\n      var results = [];\n\n      for (var key in input) {\n        if (promise._state === $$$internal$$PENDING && input.hasOwnProperty(key)) {\n          results.push({\n            position: key,\n            entry: input[key]\n          });\n        }\n      }\n\n      var length = results.length;\n      this._remaining = length;\n      var result;\n\n      for (var i = 0; promise._state === $$$internal$$PENDING && i < length; i++) {\n        result = results[i];\n        this._eachEntry(result.entry, result.position);\n      }\n    };\n\n    var $$rsvp$hash$$default = function hash(object, label) {\n      return new $$promise$hash$$default($$rsvp$promise$$default, object, label).promise;\n    };\n\n    function $$rsvp$hash$settled$$HashSettled(Constructor, object, label) {\n      this._superConstructor(Constructor, object, false, label);\n    }\n\n    $$rsvp$hash$settled$$HashSettled.prototype = $$utils$$o_create($$promise$hash$$default.prototype);\n    $$rsvp$hash$settled$$HashSettled.prototype._superConstructor = $$enumerator$$default;\n    $$rsvp$hash$settled$$HashSettled.prototype._makeResult = $$enumerator$$makeSettledResult;\n\n    $$rsvp$hash$settled$$HashSettled.prototype._validationError = function() {\n      return new Error('hashSettled must be called with an object');\n    };\n\n    var $$rsvp$hash$settled$$default = function hashSettled(object, label) {\n      return new $$rsvp$hash$settled$$HashSettled($$rsvp$promise$$default, object, label).promise;\n    };\n\n    var $$rsvp$rethrow$$default = function rethrow(reason) {\n      setTimeout(function() {\n        throw reason;\n      });\n      throw reason;\n    };\n\n    var $$rsvp$defer$$default = function defer(label) {\n      var deferred = { };\n\n      deferred.promise = new $$rsvp$promise$$default(function(resolve, reject) {\n        deferred.resolve = resolve;\n        deferred.reject = reject;\n      }, label);\n\n      return deferred;\n    };\n\n    var $$rsvp$map$$default = function map(promises, mapFn, label) {\n      return $$rsvp$promise$$default.all(promises, label).then(function(values) {\n        if (!$$utils$$isFunction(mapFn)) {\n          throw new TypeError(\"You must pass a function as map's second argument.\");\n        }\n\n        var length = values.length;\n        var results = new Array(length);\n\n        for (var i = 0; i < length; i++) {\n          results[i] = mapFn(values[i]);\n        }\n\n        return $$rsvp$promise$$default.all(results, label);\n      });\n    };\n\n    var $$rsvp$resolve$$default = function resolve(value, label) {\n      return $$rsvp$promise$$default.resolve(value, label);\n    };\n\n    var $$rsvp$reject$$default = function reject(reason, label) {\n      return $$rsvp$promise$$default.reject(reason, label);\n    };\n\n    var $$rsvp$filter$$default = function filter(promises, filterFn, label) {\n      return $$rsvp$promise$$default.all(promises, label).then(function(values) {\n        if (!$$utils$$isFunction(filterFn)) {\n          throw new TypeError(\"You must pass a function as filter's second argument.\");\n        }\n\n        var length = values.length;\n        var filtered = new Array(length);\n\n        for (var i = 0; i < length; i++) {\n          filtered[i] = filterFn(values[i]);\n        }\n\n        return $$rsvp$promise$$default.all(filtered, label).then(function(filtered) {\n          var results = new Array(length);\n          var newLength = 0;\n\n          for (var i = 0; i < length; i++) {\n            if (filtered[i]) {\n              results[newLength] = values[i];\n              newLength++;\n            }\n          }\n\n          results.length = newLength;\n\n          return results;\n        });\n      });\n    };\n\n    var $$rsvp$asap$$len = 0;\n\n    var $$rsvp$asap$$default = function asap(callback, arg) {\n      $$rsvp$asap$$queue[$$rsvp$asap$$len] = callback;\n      $$rsvp$asap$$queue[$$rsvp$asap$$len + 1] = arg;\n      $$rsvp$asap$$len += 2;\n      if ($$rsvp$asap$$len === 2) {\n        // If len is 1, that means that we need to schedule an async flush.\n        // If additional callbacks are queued before the queue is flushed, they\n        // will be processed by this flush that we are scheduling.\n        $$rsvp$asap$$scheduleFlush();\n      }\n    };\n\n    var $$rsvp$asap$$browserGlobal = (typeof window !== 'undefined') ? window : {};\n    var $$rsvp$asap$$BrowserMutationObserver = $$rsvp$asap$$browserGlobal.MutationObserver || $$rsvp$asap$$browserGlobal.WebKitMutationObserver;\n\n    // test for web worker but not in IE10\n    var $$rsvp$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&\n      typeof importScripts !== 'undefined' &&\n      typeof MessageChannel !== 'undefined';\n\n    // node\n    function $$rsvp$asap$$useNextTick() {\n      return function() {\n        process.nextTick($$rsvp$asap$$flush);\n      };\n    }\n\n    function $$rsvp$asap$$useMutationObserver() {\n      var iterations = 0;\n      var observer = new $$rsvp$asap$$BrowserMutationObserver($$rsvp$asap$$flush);\n      var node = document.createTextNode('');\n      observer.observe(node, { characterData: true });\n\n      return function() {\n        node.data = (iterations = ++iterations % 2);\n      };\n    }\n\n    // web worker\n    function $$rsvp$asap$$useMessageChannel() {\n      var channel = new MessageChannel();\n      channel.port1.onmessage = $$rsvp$asap$$flush;\n      return function () {\n        channel.port2.postMessage(0);\n      };\n    }\n\n    function $$rsvp$asap$$useSetTimeout() {\n      return function() {\n        setTimeout($$rsvp$asap$$flush, 1);\n      };\n    }\n\n    var $$rsvp$asap$$queue = new Array(1000);\n\n    function $$rsvp$asap$$flush() {\n      for (var i = 0; i < $$rsvp$asap$$len; i+=2) {\n        var callback = $$rsvp$asap$$queue[i];\n        var arg = $$rsvp$asap$$queue[i+1];\n\n        callback(arg);\n\n        $$rsvp$asap$$queue[i] = undefined;\n        $$rsvp$asap$$queue[i+1] = undefined;\n      }\n\n      $$rsvp$asap$$len = 0;\n    }\n\n    var $$rsvp$asap$$scheduleFlush;\n\n    // Decide what async method to use to triggering processing of queued callbacks:\n    if (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]') {\n      $$rsvp$asap$$scheduleFlush = $$rsvp$asap$$useNextTick();\n    } else if ($$rsvp$asap$$BrowserMutationObserver) {\n      $$rsvp$asap$$scheduleFlush = $$rsvp$asap$$useMutationObserver();\n    } else if ($$rsvp$asap$$isWorker) {\n      $$rsvp$asap$$scheduleFlush = $$rsvp$asap$$useMessageChannel();\n    } else {\n      $$rsvp$asap$$scheduleFlush = $$rsvp$asap$$useSetTimeout();\n    }\n\n    // default async is asap;\n    $$rsvp$config$$config.async = $$rsvp$asap$$default;\n\n    var $$rsvp$$cast = $$rsvp$resolve$$default;\n\n    function $$rsvp$$async(callback, arg) {\n      $$rsvp$config$$config.async(callback, arg);\n    }\n\n    function $$rsvp$$on() {\n      $$rsvp$config$$config.on.apply($$rsvp$config$$config, arguments);\n    }\n\n    function $$rsvp$$off() {\n      $$rsvp$config$$config.off.apply($$rsvp$config$$config, arguments);\n    }\n\n    // Set up instrumentation through `window.__PROMISE_INTRUMENTATION__`\n    if (typeof window !== 'undefined' && typeof window['__PROMISE_INSTRUMENTATION__'] === 'object') {\n      var $$rsvp$$callbacks = window['__PROMISE_INSTRUMENTATION__'];\n      $$rsvp$config$$configure('instrument', true);\n      for (var $$rsvp$$eventName in $$rsvp$$callbacks) {\n        if ($$rsvp$$callbacks.hasOwnProperty($$rsvp$$eventName)) {\n          $$rsvp$$on($$rsvp$$eventName, $$rsvp$$callbacks[$$rsvp$$eventName]);\n        }\n      }\n    }\n\n    var rsvp$umd$$RSVP = {\n      'race': $$rsvp$race$$default,\n      'Promise': $$rsvp$promise$$default,\n      'allSettled': $$rsvp$all$settled$$default,\n      'hash': $$rsvp$hash$$default,\n      'hashSettled': $$rsvp$hash$settled$$default,\n      'denodeify': $$rsvp$node$$default,\n      'on': $$rsvp$$on,\n      'off': $$rsvp$$off,\n      'map': $$rsvp$map$$default,\n      'filter': $$rsvp$filter$$default,\n      'resolve': $$rsvp$resolve$$default,\n      'reject': $$rsvp$reject$$default,\n      'all': $$rsvp$all$$default,\n      'rethrow': $$rsvp$rethrow$$default,\n      'defer': $$rsvp$defer$$default,\n      'EventTarget': $$rsvp$events$$default,\n      'configure': $$rsvp$config$$configure,\n      'async': $$rsvp$$async\n    };\n\n    /* global define:true module:true window: true */\n    if (typeof define === 'function' && define.amd) {\n      define(function() { return rsvp$umd$$RSVP; });\n    } else if (typeof module !== 'undefined' && module.exports) {\n      module.exports = rsvp$umd$$RSVP;\n    } else if (typeof this !== 'undefined') {\n      this['RSVP'] = rsvp$umd$$RSVP;\n    }\n}).call(this);","var rsvp = require('rsvp');\n\nmodule.exports = self.Promise ? self.Promise : rsvp.Promise;\n","'use strict';\n// Cannot feature-detect, as we have these implemented but they reject\n\nconst Promise = require('./promise');\n\nif (!Cache.prototype.add) {\n  Cache.prototype.add = function add(request) {\n    return this.addAll([request]);\n  };\n}\n\nif (!Cache.prototype.addAll) {\n  Cache.prototype.addAll = function addAll(requests) {\n    var cache = this;\n\n    // Since DOMExceptions are not constructable:\n    function NetworkError(message) {\n      this.name = 'NetworkError';\n      this.code = 19;\n      this.message = message;\n    }\n    NetworkError.prototype = Object.create(Error.prototype);\n\n    return Promise.resolve().then(function() {\n      if (arguments.length < 1) throw new TypeError();\n\n      // Simulate sequence<(Request or USVString)> binding:\n      var sequence = [];\n\n      requests = requests.map(function(request) {\n        if (request instanceof Request) {\n          return request;\n        }\n        else {\n          return String(request); // may throw TypeError\n        }\n      });\n\n      return Promise.all(\n        requests.map(function(request) {\n          if (typeof request === 'string') {\n            request = new Request(request);\n          }\n\n          var scheme = new URL(request.url).protocol;\n\n          if (scheme !== 'http:' && scheme !== 'https:') {\n            throw new NetworkError(\"Invalid scheme\");\n          }\n\n          return fetch(request.clone());\n        })\n      );\n    }).then(function(responses) {\n      // TODO: check that requests don't overwrite one another\n      // (don't think this is possible to polyfill due to opaque responses)\n      return Promise.all(\n        responses.map(function(response, i) {\n          return cache.put(requests[i], response);\n        })\n      );\n    }).then(function() {\n      return undefined;\n    });\n  };\n}\n\nif (!CacheStorage.prototype.match) {\n  // This is probably vulnerable to race conditions (removing caches etc)\n  CacheStorage.prototype.match = function match(request, opts) {\n    var caches = this;\n\n    return this.keys().then(function(cacheNames) {\n      var match;\n\n      return cacheNames.reduce(function(chain, cacheName) {\n        return chain.then(function() {\n          return match || caches.open(cacheName).then(function(cache) {\n            return cache.match(request, opts);\n          }).then(function(response) {\n            match = response;\n            return match;\n          });\n        });\n      }, Promise.resolve());\n    });\n  };\n}\n\nmodule.exports = self.caches;\n"]}